// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Splitting this file out into further files is not officially possible (yet)
// there are some community options, but for this project I've just shoved everything
// here instead of yet-another-node-module. This includes types, enums, etc. used in
// any typescript throughout the application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Intended lifecycle example
//  1. plan a new deployment > adds to this table
//  2. another person adds to the deployment > adds to this table
//  3. the deployment is triggered > based on the strategies selected a "current_deployment" is created
//  4. current deployment finished! Delete it from the "current_deployment" table and update EOL statuses
//  5. repeat!
model PlannedDeployment {
  id        String   @id @default(uuid()) @db.VarChar(36)
  createdAt DateTime @default(now())
  personId  String   @db.VarChar(36)
  person    Person   @relation(fields: [personId], references: [id])

  featureId String  @db.VarChar(36)
  feature   Feature @relation(fields: [featureId], references: [id])
  strategy  String

  @@map("planned_deployments")
}

// A build will be triggered with the content from this deployment when the
// build sever is available
model Deployment {
  id           String    @id @default(uuid()) @db.VarChar(36)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  completedAt  DateTime?
  erroredAt    DateTime?
  errorMessage String?
  status       Status
  strategy     Strategy

  // latest ordered by  deployedAt is the current deployment
  deployedAt DateTime?

  // auto-navigation properties
  ContentInDeployment ContentInDeployment[]

  @@map("deployments")
}

model ContentInDeployment {
  personId     String     @db.VarChar(36)
  person       Person     @relation(fields: [personId], references: [id])
  featureId    String     @db.VarChar(36)
  feature      Feature    @relation(fields: [featureId], references: [id])
  deploymentId String     @db.VarChar(36)
  deployment   Deployment @relation(fields: [deploymentId], references: [id])

  @@id(name: "contentInDeploymentId", [personId, featureId, deploymentId])
  @@map("content_in_deployment")
}

model Feature {
  id           String @id @default(uuid()) @db.VarChar(36)
  name         String @db.VarChar(250)
  ticketNumber String @db.VarChar(10)

  // not particularly useful, but can be used for easier data-cleanup
  createdAt DateTime @default(now())

  // auto-navigation properties
  PlannedDeployments  PlannedDeployment[]
  ContentInDeployment ContentInDeployment[]

  @@map("feature")
}

model Team {
  id        String   @id @default(uuid()) @db.VarChar(36)
  createdAt DateTime @default(now())
  name      String

  // auto-navigation properties
  People Person[]

  @@map("team")
}

model Person {
  id       String   @id @default(uuid()) @db.VarChar(36)
  name     String
  teamId   String   @db.VarChar(36)
  team     Team     @relation(fields: [teamId], references: [id])
  joinedAt DateTime @default(now())

  // auto-navigation properties
  ContentInDeployment ContentInDeployment[]
  PlannedDeployments  PlannedDeployment[]

  @@map("person")
}

///////////////////////////////////////////////////////////////////////////////////////
// Enums
///////////////////////////////////////////////////////////////////////////////////////

enum Status {
  ERROR
  AVAILABLE
  BUSY
  PLANNED
  PENDING
}

enum Strategy {
  SINGLE
  BATCHED
}
